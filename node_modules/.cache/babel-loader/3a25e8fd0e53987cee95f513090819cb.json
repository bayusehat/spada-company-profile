{"ast":null,"code":"\"use strict\";\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar PropTypes = require(\"prop-types\");\n\nvar warning = require(\"warning\");\n\nvar invariant = require(\"invariant\");\n\nvar react_router_1 = require(\"react-router\");\n/**\n * The public API for rendering the first <Route> that matches.\n */\n\n\nvar Switch = function (_React$Component) {\n  _inherits(Switch, _React$Component);\n\n  function Switch() {\n    _classCallCheck(this, Switch);\n\n    return _possibleConstructorReturn(this, (Switch.__proto__ || Object.getPrototypeOf(Switch)).apply(this, arguments));\n  }\n\n  _createClass(Switch, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      invariant(this.context.router, 'You should not use <Switch> outside a <Router>');\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      warning(!(nextProps.location && !this.props.location), '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no \"location\" prop and then provided one on a subsequent render.');\n      warning(!(!nextProps.location && this.props.location), '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a \"location\" prop initially but omitted it on a subsequent render.');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var route = this.context.router.route;\n      var _props = this.props,\n          children = _props.children,\n          render = _props.render;\n      var location = this.props.location || route.location;\n      var match = null,\n          child = void 0,\n          index = -1;\n      React.Children.forEach(children, function (element, i) {\n        if (match == null && React.isValidElement(element)) {\n          var _element$props = element.props,\n              pathProp = _element$props.path,\n              exact = _element$props.exact,\n              strict = _element$props.strict,\n              sensitive = _element$props.sensitive,\n              from = _element$props.from;\n          var path = pathProp || from;\n          child = element;\n          match = path ? react_router_1.matchPath(location.pathname, {\n            path: path,\n            exact: exact,\n            strict: strict,\n            sensitive: sensitive\n          }) : route.match;\n\n          if (match) {\n            index = i;\n          }\n        }\n      });\n      var result = match ? React.cloneElement(child, {\n        location: location,\n        computedMatch: match\n      }) : null;\n      return render ? render(result, index, this.props.children) : result;\n    }\n  }]);\n\n  return Switch;\n}(React.Component);\n\nSwitch.contextTypes = {\n  router: PropTypes.shape({\n    route: PropTypes.object.isRequired\n  }).isRequired\n};\nSwitch.propTypes = {\n  children: PropTypes.node,\n  location: PropTypes.object\n};\nexports.default = Switch;","map":null,"metadata":{},"sourceType":"script"}