{"ast":null,"code":"function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { cloneElement, createElement, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Route, Switch, matchPath, useLocation } from 'react-router-dom';\nimport TransitionMotion from 'react-motion/lib/TransitionMotion';\nimport spring from 'react-motion/lib/spring'; // Helpers\n\nfunction ensureSpring(styles) {\n  var obj = {};\n\n  for (var key in styles) {\n    var value = styles[key];\n\n    if (typeof value === 'number') {\n      obj[key] = spring(value);\n    } else {\n      obj[key] = value;\n    }\n  }\n\n  return obj;\n}\n\nfunction identity(v) {\n  return v;\n}\n\nfunction noop() {} // Components\n\n\nfunction RouteTransition(_ref) {\n  var children = _ref.children,\n      className = _ref.className,\n      atEnter = _ref.atEnter,\n      atActive = _ref.atActive,\n      atLeave = _ref.atLeave,\n      _ref$wrapperComponent = _ref.wrapperComponent,\n      wrapperComponent = _ref$wrapperComponent === void 0 ? 'div' : _ref$wrapperComponent,\n      _ref$didLeave = _ref.didLeave,\n      didLeave = _ref$didLeave === void 0 ? noop : _ref$didLeave,\n      _ref$mapStyles = _ref.mapStyles,\n      mapStyles = _ref$mapStyles === void 0 ? identity : _ref$mapStyles,\n      _ref$runOnMount = _ref.runOnMount,\n      runOnMount = _ref$runOnMount === void 0 ? false : _ref$runOnMount;\n  var defaultStyles = runOnMount === false ? null : children == undefined ? [] : [{\n    key: children.key,\n    data: children,\n    style: atEnter\n  }];\n  var styles = children == undefined ? [] : [{\n    key: children.key,\n    data: children,\n    style: ensureSpring(atActive)\n  }];\n  return React.createElement(TransitionMotion, {\n    defaultStyles: defaultStyles,\n    styles: styles,\n    willEnter: function willEnter() {\n      return atEnter;\n    },\n    willLeave: function willLeave() {\n      return ensureSpring(atLeave);\n    },\n    didLeave: didLeave\n  }, function (interpolatedStyles) {\n    return React.createElement(\"div\", {\n      className: className\n    }, interpolatedStyles.map(function (config) {\n      var props = {\n        style: mapStyles(config.style),\n        key: config.key\n      };\n      return wrapperComponent !== false ? createElement(wrapperComponent, props, config.data) : cloneElement(config.data, props);\n    }));\n  });\n}\n\nRouteTransition.propTypes = {\n  className: PropTypes.string,\n  wrapperComponent: PropTypes.oneOfType([PropTypes.bool, PropTypes.element, PropTypes.string, PropTypes.func]),\n  atEnter: PropTypes.object.isRequired,\n  atActive: PropTypes.object.isRequired,\n  atLeave: PropTypes.object.isRequired,\n  didLeave: PropTypes.func,\n  mapStyles: PropTypes.func,\n  runOnMount: PropTypes.bool\n}; // AnimatedRoute\n// The key-getter for RouteTransition. It's either on or off.\n\nfunction getKey(_ref2, path, exact) {\n  var pathname = _ref2.pathname;\n  return matchPath(pathname, {\n    exact: exact,\n    path: path\n  }) ? 'match' : 'no-match';\n}\n\nfunction AnimatedRoute(_ref3) {\n  var render = _ref3.render,\n      component = _ref3.component,\n      path = _ref3.path,\n      exact = _ref3.exact,\n      routeTransitionProps = _objectWithoutProperties(_ref3, [\"render\", \"component\", \"path\", \"exact\"]);\n\n  var location = useLocation();\n  return React.createElement(RouteTransition, routeTransitionProps, React.createElement(Route, {\n    key: getKey(location, path, exact),\n    path: path,\n    exact: exact,\n    location: location,\n    component: component,\n    render: render\n  }));\n} // AnimatedSwitch\n\n\nvar NO_MATCH = {\n  key: 'no-match'\n}; // Not every location object has a `key` property (e.g. HashHistory).\n\nfunction getLocationKey(location) {\n  return typeof location.key === 'string' ? location.key : '';\n} // Some superfluous work, but something we need to do in order\n// to persist matches/allow for nesting/etc.\n\n\nfunction getMatchedRoute(children, _ref4) {\n  var pathname = _ref4.pathname;\n  var childrenArray = React.Children.toArray(children);\n\n  for (var i = 0; i < childrenArray.length; i++) {\n    var child = childrenArray[i];\n    var matches = matchPath(pathname, {\n      exact: child.props.exact,\n      path: child.props.path\n    });\n\n    if (matches) {\n      return child;\n    }\n  }\n\n  return NO_MATCH;\n}\n\nvar counter = 0;\n\nfunction AnimatedSwitch(_ref5) {\n  var children = _ref5.children,\n      routeTransitionProps = _objectWithoutProperties(_ref5, [\"children\"]);\n\n  var location = useLocation();\n  var match = useRef(null);\n  var key = useRef(null);\n  var nextMatch = getMatchedRoute(children, location);\n\n  if (match.current === null) {\n    // Persist a reference to the most recent match\n    match.current = nextMatch;\n    key.current = getLocationKey(location);\n  } else if (match.current.key !== nextMatch.key) {\n    // Update the key given to Switch anytime the matched route changes\n    match.current = nextMatch;\n    key.current = getLocationKey(location) + ++counter;\n  }\n\n  return React.createElement(RouteTransition, routeTransitionProps, React.createElement(Switch, {\n    key: key.current,\n    location: location\n  }, children));\n}\n\nexport { ensureSpring, spring, RouteTransition, AnimatedRoute, AnimatedSwitch };","map":null,"metadata":{},"sourceType":"module"}