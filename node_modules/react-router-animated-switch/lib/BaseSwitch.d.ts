/// <reference types="react" />
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { RouterChildContext, match } from 'react-router';
import { Location } from 'history';
export interface Props {
    children?: React.ReactNode;
    location?: Location;
    render?: (child: React.SFCElement<{
        location: Location;
        computedMatch: match<any>;
    }> | null, index: number, children?: React.ReactNode) => React.ReactNode;
}
/**
 * The public API for rendering the first <Route> that matches.
 */
declare class Switch extends React.Component<Props> {
    static contextTypes: {
        router: PropTypes.Validator<any>;
    };
    static propTypes: {
        children: PropTypes.Requireable<any>;
        location: PropTypes.Requireable<any>;
    };
    context: RouterChildContext<any>;
    componentWillMount(): void;
    componentWillReceiveProps(nextProps: Props): void;
    render(): {} | null | undefined;
}
export default Switch;
